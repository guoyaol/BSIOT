'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _component = require('./component');

var _component2 = _interopRequireDefault(_component);

var _mapvgl = require('mapvgl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file mapvgl的view图层管理类
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author hedongran
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @email hdr01@126.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var MapvglView = function (_Component) {
    _inherits(MapvglView, _Component);

    function MapvglView() {
        _classCallCheck(this, MapvglView);

        return _possibleConstructorReturn(this, (MapvglView.__proto__ || Object.getPrototypeOf(MapvglView)).apply(this, arguments));
    }

    _createClass(MapvglView, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.initialize();
            this.forceUpdate();
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.mapvglView) {
                this.mapvglView.destroy();
                this.mapvglView = null;
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            if (!this.map || !this.mapvglView) {
                this.initialize();
            }
        }
    }, {
        key: 'initialize',
        value: function initialize() {
            var map = this.props.map;
            if (!map) {
                return;
            }
            this.map = map;

            if (!this.mapvglView) {
                var effects = [];
                var simpleEffects = this.props.effects;
                if (simpleEffects && simpleEffects.length) {
                    simpleEffects.forEach(function (name) {
                        if (name === 'bloom') {
                            effects.push(new _mapvgl.BloomEffect());
                        } else if (name === 'bright') {
                            effects.push(new _mapvgl.BrightEffect());
                        } else if (name === 'blur') {
                            effects.push(new _mapvgl.BlurEffect());
                        }
                    });
                }
                this.mapvglView = new _mapvgl.View({
                    mapType: 'bmap',
                    effects: effects,
                    map: map
                });
            }
        }

        /**
         * 在子元素props中附上view和map字段
         * @return {string|Element} children with props
         * @memberof MapvglView
         */

    }, {
        key: 'renderChildren',
        value: function renderChildren() {
            var _this2 = this;

            var children = this.props.children;

            if (!children || !this.map || !this.mapvglView) {
                return;
            }

            return _react2.default.Children.map(children, function (child) {
                if (!child) {
                    return;
                }

                if (typeof child.type === 'string') {
                    return child;
                } else {
                    return _react2.default.cloneElement(child, {
                        map: _this2.map,
                        view: _this2.mapvglView
                    });
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                { title: 'mapvgl view' },
                this.renderChildren()
            );
        }
    }]);

    return MapvglView;
}(_component2.default);

exports.default = MapvglView;